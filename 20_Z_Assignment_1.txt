Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas. They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components. Examine the two deployments, and create two services that meet the following criteria:

auth-svc
The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.
data-svc
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.
Note: All work should be done in the default namespace.


----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------



vi auth-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 5
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      name: webapp-pod
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp-ctr
        image: nginx

vi data-deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-deployment
spec:
  replicas: 5
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      name: webapp-pod
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp-ctr
        image: nginx

master $ kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
auth-deployment-54576d4f58-g87z5   1/1     Running   0          59s
auth-deployment-54576d4f58-hlkfv   1/1     Running   0          59s
auth-deployment-54576d4f58-k6jxc   1/1     Running   0          59s
auth-deployment-54576d4f58-l6x9f   1/1     Running   0          59s
auth-deployment-54576d4f58-w8s2q   1/1     Running   0          59s
data-deployment-54576d4f58-786s7   1/1     Running   0          5m32s
data-deployment-54576d4f58-lpctd   1/1     Running   0          5m32s
data-deployment-54576d4f58-ntg2s   1/1     Running   0          5m32s
data-deployment-54576d4f58-rwj7h   1/1     Running   0          5m32s
data-deployment-54576d4f58-vzfxp   1/1     Running   0          5m32s


$ curl 10.40.0.6:80


<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>


vi auth-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: auth-svc
spec:
  selector:
    app: webapp
  type: NodePort
  ports:
  - port: 8080
    targetPort: 80
    nodePort: 30000

$ kubectl apply -f auth-svc.yml
service/auth-svc created
$ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.106.144.234   <none>        8080:30000/TCP   5m58s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          62m

vi data-svc.yml
apiVersion: v1
kind: Service
metadata:  
  name: data-svc
spec:
  selector:    
    app: my-app
  type: ClusterIP
  ports:
    port: 80
    targetPort: 80

$ kubectl apply -f data-svc.yml
service/data-svc created

$ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.106.144.234   <none>        8080:30000/TCP   8m52s
data-svc     ClusterIP   10.109.254.220   <none>        80/TCP           15s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          64m


